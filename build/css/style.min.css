/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}body{background:#272727}@font-face{font-family:Cuprum;src:url(../fonts/cuprum.eot);src:url(../fonts/cuprum.eot?#iefix) format("embedded-opentype"),url(../fonts/cuprum.woff2) format("woff2"),url(../fonts/cuprum.woff) format("woff"),url(../fonts/cuprum.ttf) format("truetype"),url(../fonts/cuprum.svg#cuprum) format("svg")}@font-face{font-family:'Cuprum Italic';src:url(../fonts/cuprum_italic.eot);src:url(../fonts/cuprum_italic.eot?#iefix) format("embedded-opentype"),url(../fonts/cuprum_italic.woff2) format("woff2"),url(../fonts/cuprum_italic.woff) format("woff"),url(../fonts/cuprum_italic.ttf) format("truetype"),url(../fonts/cuprum_italic.svg#cuprum_italic) format("svg")}@font-face{font-family:'Montserrat Bold';src:url(../src/fonts/Montserrat-Bold.ttf) format("truetype")}.icon{display:inline-block;width:1em;height:1em;fill:currentColor}.icon-phone{font-size:2rem;width:1em}/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font:1em monospace,monospace}a{background:0 0}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font:1em monospace,monospace}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font:100%/1.15 inherit;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}*,::after,::before{box-sizing:inherit}html{box-sizing:border-box}img{max-width:100%}a{text-decoration:none}.container{max-width:1720px;width:100%;margin:0 auto}.header{display:flex;align-items:center;justify-content:space-between;margin-top:25px;margin-left:100px;margin-right:100px}.header__navigation{display:flex}.header__link{font:normal 700 14px/150% Montserrat;color:#fff;transition:color ease .3s}.header__link:not(:last-child){margin-right:40px}.header__link:hover{color:#c1b9b9}.header__buttons{display:flex;align-items:center}.footer{background:url(/img/footer/background.jpg);margin-top:108px}.footer .container{display:flex;justify-content:space-between}@media screen and (max-width:686px){.footer .container{position:relative}}@media screen and (max-width:686px){.footer{background-size:cover;padding-bottom:40px}}.footer__img-logo{margin-left:71px;margin-top:75px}@media screen and (max-width:686px){.footer__img-logo{margin-top:25px}}.footer__adaptive{display:flex;flex-direction:column;text-align:center;margin-top:20px}@media screen and (min-width:687px){.footer__adaptive{display:none}}.footer__adaptive-link{font:15px/30px 'Bebas Neue Regular';color:#000;transition:color ease .3s}.footer__adaptive-link:hover{color:#464545}.footer__links{max-width:264px;width:100%}@media screen and (max-width:686px){.footer__links{margin:auto}}.footer__socials{list-style:none;width:100%;margin-top:71px;margin-bottom:76px;display:flex;justify-content:space-between;padding-left:0;position:relative}@media screen and (max-width:686px){.footer__socials{margin-top:40px}}.footer__link{display:flex;justify-content:center;align-items:center;position:relative;width:41px;height:41px}.footer__link::before{background:#d3cac9;content:"";position:absolute;border-radius:50%;width:100%;height:100%;z-index:1;transition:background-color ease .3s}.footer__link:hover::before{background:#e0d5d4}@media screen and (max-width:786px){.footer__link{width:38px;height:38px}}.footer__img{position:relative;z-index:2}.footer__wrapper{width:702px;margin-right:48px}@media screen and (max-width:1130px){.footer__wrapper{margin-left:15px}}@media screen and (max-width:1010px){.footer__wrapper{margin-right:20px}}@media screen and (max-width:686px){.footer__wrapper{display:flex;flex-direction:column;justify-content:flex-end;margin-right:0;margin-left:0;width:0}}.footer__navigation{display:flex;justify-content:space-between;margin-top:62px;margin-bottom:0;padding-left:0}@media screen and (max-width:686px){.footer__navigation{display:none}}.footer__about-project{list-style:none}@media screen and (max-width:984px){.footer__about-project:not(:last-child){padding-right:20px}}.footer__advertisement{font:18px Cuprum;color:rgba(0,0,0,.47);letter-spacing:4px;transition:color ease .3s}.footer__advertisement:hover{color:rgba(44,43,43,.47)}@media screen and (max-width:1024px){.footer__advertisement{font-size:16px}}@media screen and (max-width:768px){.footer__advertisement{font-size:14px}}.footer__menu{display:flex;justify-content:space-between}@media screen and (max-width:686px){.footer__menu{display:none}}.footer__menu-links{margin-top:45px}.footer__title{font:15px 'Bebas Neue Regular';display:inline-block;color:#000;letter-spacing:3px;margin-top:0;margin-bottom:20px;cursor:pointer;transition:color ease .3s}.footer__title:hover{color:#4d4b4b}@media screen and (max-width:886px){.footer__title{font-size:13px}}@media screen and (max-width:786px){.footer__title{font-size:10px}}.footer__menu-link{font:16px Cuprum;display:block;color:#7c7c7c;transition:color ease .3s}.footer__menu-link:not(:last-child){margin-bottom:19px}.footer__menu-link:hover{color:#ada9a9}@media screen and (max-width:886px){.footer__menu-link{font-size:14px}}.footer__copyright{font:12px 'Bebas Neue Regular';color:#a19994;letter-spacing:3px;margin-top:51px}@media screen and (max-width:984px){.footer__copyright{margin-top:27px}}@media screen and (max-width:886px){.footer__copyright{margin-top:51px}}@media screen and (max-width:786px){.footer__copyright{font-size:10px}}@media screen and (max-width:736px){.footer__copyright{margin-top:37px}}@media screen and (max-width:686px){.footer__copyright{position:absolute;left:26%}}@media screen and (max-width:636px){.footer__copyright{position:absolute;left:24%}}@media screen and (max-width:536px){.footer__copyright{position:absolute;left:20%}}@media screen and (max-width:486px){.footer__copyright{position:absolute;left:17%}}@media screen and (max-width:436px){.footer__copyright{position:absolute;left:13%}}@media screen and (max-width:386px){.footer__copyright{position:absolute;left:8%}}@media screen and (max-width:320px){.footer__copyright{position:absolute;left:2%;text-align:center}}.button{font:normal 700 12px Montserrat;background:0 0;border:none;height:60px;color:#fff;position:relative;cursor:pointer}.button:not(:last-child){margin-right:12px}.button--theme-dark::after{background:#272727;content:'';position:absolute;transform:skew(-20deg);border:1px solid #fff;height:100%;width:100%;z-index:-1;left:0;top:0;transition:background-color ease .3s}.button--theme-dark:hover::after{background:#595757}.button--theme-light::after{background:#c2ab81;content:'';position:absolute;transform:skew(-20deg);height:100%;width:100%;z-index:-1;left:0;top:0;transition:background-color ease .3s}.button--theme-light::before{background:#fff;content:'';position:absolute;transform:skew(-20deg);height:100%;width:5px;right:-10px;top:0}.button--theme-light:hover::after{background:#dbc394}.button--size-small{padding:20px 35px}.button--size-small .icon{font-size:20px}.button--size-big{padding:20px 75px}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
